import java.util.ArrayList;
import java.util.*;
/**
* Splits a .wav file apart into "numNewWaves" new, smaller
* wav files and saves these arrays in a two dimensional array of arrays called "chunks".
* Stores the following information about each of these new arrays:
* - maximum value
* - minimum value
* - average value
*/
public class ChunkedUpWav {
  private double maximum = 0;
  private double minimum = 0;
  private double average = 0;
  public static double median = 0;
  private double[][] chunks;
  private ArrayList<ArrayList<Double>> chunks2 = new ArrayList<ArrayList<Double>>();
  private Processor wholeWave;

  public ChunkedUpWav(String fileName, int numNewWaves) {
    wholeWave = new Processor(fileName);
    this.getInformation(numNewWaves);
    this.makeMiniWaves(numNewWaves);
  }
  /**
  * Calculates the average value, minimum value, and maximum of a segment of the double array.
  * The segments generated by this method are sliced apart
  * at even intervals. The "factor" parameter determines how often to split the file.
  */
  private double[] getInformation(int factor) {
    int arrSizes = wholeWave.getOriginalSamples().length/factor; // the size of the arrays made
    double[] smallWav = new double[arrSizes];
    double[] oldWave = wholeWave.getOriginalSamples();
    for(int i = 0; i < arrSizes; i++) {
      smallWav[i] = oldWave[i];
    }
    double sum = 0;
    for(int f = 0; f < arrSizes; f++) {
      sum += smallWav[f];
      if(smallWav[f] > maximum) {
        maximum = smallWav[f];
      }
      if(smallWav[f] < minimum) {
        minimum = smallWav[f];
      }
    }
    average = sum/smallWav.length;
    System.out.println("avg val: " + average);
    System.out.println("max val: " + maximum);
    System.out.println("min val: " + minimum);
    return smallWav;
  }
  public void makeMiniWaves(int factor) { // where factor is the number of new arrays made
    double[] oldWave = wholeWave.getOriginalSamples();
    int newLength = oldWave.length/factor;
    ArrayList<Double> chunk = new ArrayList<Double>();
    int startHere = 0;
    for(int i = 0; i < factor; i++) {
      for(int f = startHere; f < newLength; f++) {
        chunk.add(oldWave[f]);
      }
      chunks2.add(chunk);
      startHere += newLength;
    }
  }
  /**
  * @return the median value of the double array of data.
  */
  public static double calculateMedian(ArrayList<Double> data) {
    Collections.sort(data);
    double median = 0;
    if(data.size() % 2 == 0) {
      median = data.get(data.size()/2);
    }
    else {
      median = (data.get(data.size()/2) + data.get((data.size()/2) + 1))/2;
    }
    return median;
  }
  public double[][] getChunks() {
    return chunks;
  }
  public ArrayList<ArrayList<Double>> getChunks2() {
    return chunks2;
  }
  public double getAvg() {
    return average;
  }
  public double getMinimum() {
    return minimum;
  }
  public double getMaxmimum() {
    return maximum;
  }
  public double getMedian() {
    return median;
  }
}
